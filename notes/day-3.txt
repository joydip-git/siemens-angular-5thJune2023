1. services
2. rxjs
3. pipe
4. forms
5. routing

PMS APP:
app
	app.component.html
	app.component.css
	app.component.ts
	app.module.ts

	pms-common (folder)
		pms-common.module.ts (file)
		components (folder)
			home (folder)
				home.component.ts (HomeComponent)
				home.component.html
				home.component.css

			dashboard (folder)
				dashboard.component.ts (DashBoardComponent)
				dashboard.component.html
				dashboard.component.css

			page-not-found (folder)
				page-not-found.component.ts (PageNotFoundComponent)
				page-not-found.component.html
				page-not-found.component.css

	products (folder)
		products.module.ts (file)
			components (folder)

				product-list (folder)
					product-list.component.html (ProuctListComponent)
					product-list.component.css
					product-list.component.ts

				add-product (folder)
					add-product.component.html
					add-product.component.css
					add-product.component.ts (AddProductComponent)

				product-detail (file)
					product-detail.component.html 
					product-detail.component.css
					product-detail.component.ts (ProductDetailComponent)

				product-table
					product-table.component.html
					product-table.component.css
 					product-table.component.ts (ProductTableComponent)

				update-product (folder)
					update-product.component.html
					update-product.component.css
					update-product.component.ts (UpdateProductComponent)
		
				filter-items (folder)
					filter-items.component.html
					filter-items.component.css
					filter-items.component.ts (FilterItemsComponent)
	
		pipes (folder)
			product-filter.pipe.ts

		services (folder)
			product.service.ts

		directives
			password-validator.directive.ts


NG CLI commands:
>ng generate or >ng g

module:
>ng g m pms-common

component:
>ng g c pms-common/components/home --skip-tests

service:
>ng g s servic-name


routes:
localhost:4200										HomeComponent
localhost:4200/home								HomeComponent

localhost:4200/products							ProductListComponent [FilterItemsComponent 																						+ ProductTableComponent]
localhost:4200/products/add					AddProductComponent
localhost:4200/products/view?id=1				ProductDetailComponent
localhost:4200/products/update/1			UpdateProductComponent

localhost:4200/**									PageNotFoundComponent

RouterModule => @angular/routes

types: Route, Routes (Route[]), RouterState, ActivatedRouteSnapshot
directives: 
	component: router-outlet
	attribute: routerLink

services:
	ActivatedRoute, Router

path matching strategy:
full, prefix

RouterState
ActivatedRoute => params, queryParams
ActivatedRoute => params, queryParams
ActivatedRoute => params, queryParams
ActivatedRoute => params, queryParams
ActivatedRoute => params, queryParams

{
	id:100,
	pid:200
}


RESTful API request URLs:
-----------------------------------------------------------------------------------------
URL										method		data				response
-----------------------------------------------------------------------------------------
All Records:
http://127.0.0.1:3003/products	GET			NA					{message:'', data:[{},{},...]}

Single Record:
http://127.0.0.1:3003/products/1	GET			pid				{message:'', data:{}}
http://127.0.0.1:3003/products/1	GET			pid				{message:'', data:null}

Adding new record:
http://127.0.0.1:3003/products	POST			product			{message:'', data:[{},{},...]}
http://127.0.0.1:3003/products	POST			product			{message:'', data:null}

Updating existing record:
http://127.0.0.1:3003/products/1	PUT			pid,product		{message:'', data:[{},{},...]}
http://127.0.0.1:3003/products/1	PUT			pid,product		{message:'', data:null}

Deleteing existing record:
http://127.0.0.1:3003/products/1	DELETE		pid				{message:'', data:[{},{},...]}
http://127.0.0.1:3003/products/1	DELETE		pid				{message:'', data:null}

Http Requests:
----------------------------------------
built-in service class: HttpClient => .put(), .get(),.....
module file:				HttpClientModule
package: @angular/common/http

Component LifeCycle:

event-name			interface		method
X						OnX				ngOnX
changes				OnChanges		ngOnChanges
init					OnInit			ngOnInit

changes (first time as well as everytime, when parent's updated data is passed to the nested)
int (only one time, when the object gets created)
....
destroy



			
