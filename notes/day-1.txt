1. JavaScript - basics and advanced and TypeScript
2. New features in JS
3. Node JS
4. modular programming in JS
5. web app development artifacts
		- tools (transpiler)
		- @types
		- module loader

Front-end framework:
Angular, React and Next JS, Vue

RESTful API/server-side:
Node JS + Express JS, Nest JS


https://github.com/joydip-git/siemens-angular-5thJune2023

Ryan Dahl

JS engines:
chrome: V8
safari: JSCore
firefox: spidermonkey

JavaScript:
data types: number, string, object, boolean
(undefined, NaN, NULL, Infinity)

Scripting language guideline: ECMAScript (ECMA)


Transpilation and Transpiler:
Conversion of 
	a. latest JS code to older possible JS code: babel
	b. TS code to older possible JS code: tsc


class DataService{
	public Employee[] GetEmployees(){
		return new Employee[]{ new Employee(1,"Anil",1000),new Employee(2,"Sunil",2000)};
	}
}

<?xml version=1.0....>
<employees>
<employee>
	<id>1</id>
	<name>1</name>
	<salary>1</salary>
</employee>
<employee>
	<id>2</id>
	<name>sunil</name>
	<salary>2000</salary>
</employee>

</employees>


[{
	"name":"Anil",
	"id":1,	
	"salary":1000
},
{
	"name":"Sunil",
	"id":2,	
	"salary":2000
}]

{"first":10, "second":20}

{ "result":30}

NPM:
dev dependency:
>npm i <package-name> -D
old:
>npm i <package-name> --save-dev

complete dependency:
>npm i <package-name>
old:
>npm i <package-name> --save

to create package.json=>
>npm init
or
>npm init --yes

to find issues:
>npm audit 

to fix issues:
>npm audit fix --force


to create tsconfig.json=>
>tsc --init

Module: public API to expose assets of one file to outside

Different module formats:
1. Common JS format:(default module format of Node JS)
export: module.exports = {...}
import: var exportsObject = require('....')

2. ES6 module format:
export: export member-name
import: import {} from ''

3. Asynchronous Module Definition (AMD)
4. Universal Module Definition (UMD)

Module loaders:
requirejs (understands only AMD module format out of all)
systemjs
commonjs module loader (pat of Node JS runtime)









